// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageSync.Helper.Authorization
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleAssignmentsOperations.
    /// </summary>
    public static partial class RoleAssignmentsOperationsExtensions
    {
            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type name. For example the type name of a web app is 'sites'
            /// (from Microsoft.Web/sites).
            /// </param>
            /// <param name='resourceName'>
            /// The resource name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='tenantId'>
            /// Tenant ID for cross-tenant request
            /// </param>
            public static IPage<RoleAssignment> ListForResource(this IRoleAssignmentsOperations operations, string resourceGroupName, string resourceProviderNamespace, string resourceType, string resourceName, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>), string tenantId = default(string))
            {
                return operations.ListForResourceAsync(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, odataQuery, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='resourceProviderNamespace'>
            /// The namespace of the resource provider.
            /// </param>
            /// <param name='resourceType'>
            /// The resource type name. For example the type name of a web app is 'sites'
            /// (from Microsoft.Web/sites).
            /// </param>
            /// <param name='resourceName'>
            /// The resource name.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='tenantId'>
            /// Tenant ID for cross-tenant request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForResourceAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string resourceProviderNamespace, string resourceType, string resourceName, ODataQuery<RoleAssignmentFilter> odataQuery = default(ODataQuery<RoleAssignmentFilter>), string tenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceWithHttpMessagesAsync(resourceGroupName, resourceProviderNamespace, resourceType, resourceName, odataQuery, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            public static RoleAssignment Create(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters)
            {
                return operations.CreateAsync(scope, roleAssignmentName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> CreateAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, RoleAssignmentCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(scope, roleAssignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='tenantId'>
            /// Tenant ID for cross-tenant request
            /// </param>
            public static RoleAssignment Delete(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, string tenantId = default(string))
            {
                return operations.DeleteAsync(scope, roleAssignmentName, tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a role assignment by scope and name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the operation or resource. Valid scopes are: subscription
            /// (format: '/subscriptions/{subscriptionId}'), resource group (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            /// resource (format:
            /// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            /// </param>
            /// <param name='roleAssignmentName'>
            /// The name of the role assignment. It can be any valid GUID.
            /// </param>
            /// <param name='tenantId'>
            /// Tenant ID for cross-tenant request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignment> DeleteAsync(this IRoleAssignmentsOperations operations, string scope, string roleAssignmentName, string tenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(scope, roleAssignmentName, tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignment> ListForResourceNext(this IRoleAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListForResourceNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all role assignments that apply to a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignment>> ListForResourceNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListForResourceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
