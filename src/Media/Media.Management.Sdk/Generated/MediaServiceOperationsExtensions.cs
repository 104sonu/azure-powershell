// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Media
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for MediaServiceOperations
    /// </summary>
    public static partial class MediaServiceOperationsExtensions
    {
        /// <summary>
        /// Check whether the Media Service resource name is available. The name must
        /// be globally unique.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static CheckNameAvailabilityOutput CheckNameAvailabilty(this IMediaServiceOperations operations, CheckNameAvailabilityInput checkNameAvailabilityInput)
        {
                return ((IMediaServiceOperations)operations).CheckNameAvailabiltyAsync(checkNameAvailabilityInput).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Check whether the Media Service resource name is available. The name must
        /// be globally unique.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CheckNameAvailabilityOutput> CheckNameAvailabiltyAsync(this IMediaServiceOperations operations, CheckNameAvailabilityInput checkNameAvailabilityInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckNameAvailabiltyWithHttpMessagesAsync(checkNameAvailabilityInput, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all of the Media Services in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        public static System.Collections.Generic.IEnumerable<MediaService> ListByResourceGroup(this IMediaServiceOperations operations, string resourceGroupName)
        {
                return ((IMediaServiceOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all of the Media Services in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MediaService>> ListByResourceGroupAsync(this IMediaServiceOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        public static MediaService Get(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName)
        {
                return ((IMediaServiceOperations)operations).GetAsync(resourceGroupName, mediaServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MediaService> GetAsync(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, mediaServiceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        public static MediaService Create(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, MediaService mediaService)
        {
                return ((IMediaServiceOperations)operations).CreateAsync(resourceGroupName, mediaServiceName, mediaService).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MediaService> CreateAsync(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, MediaService mediaService, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, mediaServiceName, mediaService, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        public static void Delete(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName)
        {
                ((IMediaServiceOperations)operations).DeleteAsync(resourceGroupName, mediaServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, mediaServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Update a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        public static MediaService Update(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, MediaService mediaService)
        {
                return ((IMediaServiceOperations)operations).UpdateAsync(resourceGroupName, mediaServiceName, mediaService).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MediaService> UpdateAsync(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, MediaService mediaService, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, mediaServiceName, mediaService, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Regenerate the key for a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        public static RegenerateKeyOutput RegenerateKey(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, RegenerateKeyInput regenerateKeyInput)
        {
                return ((IMediaServiceOperations)operations).RegenerateKeyAsync(resourceGroupName, mediaServiceName, regenerateKeyInput).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Regenerate the key for a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<RegenerateKeyOutput> RegenerateKeyAsync(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, RegenerateKeyInput regenerateKeyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RegenerateKeyWithHttpMessagesAsync(resourceGroupName, mediaServiceName, regenerateKeyInput, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List the keys for a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        public static ServiceKeys ListKeys(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName)
        {
                return ((IMediaServiceOperations)operations).ListKeysAsync(resourceGroupName, mediaServiceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List the keys for a Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ServiceKeys> ListKeysAsync(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, mediaServiceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Synchronize the keys for a storage account to the Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        public static MediaService SyncStorageKeys(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, SyncStorageKeysInput syncStorageKeysInput)
        {
                return ((IMediaServiceOperations)operations).SyncStorageKeysAsync(resourceGroupName, mediaServiceName, syncStorageKeysInput).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Synchronize the keys for a storage account to the Media Service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of the resource group within the Azure subscription.
        /// </param>
        /// <param name='mediaServiceName'>
        /// Name of the Media Service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<MediaService> SyncStorageKeysAsync(this IMediaServiceOperations operations, string resourceGroupName, string mediaServiceName, SyncStorageKeysInput syncStorageKeysInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SyncStorageKeysWithHttpMessagesAsync(resourceGroupName, mediaServiceName, syncStorageKeysInput, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
